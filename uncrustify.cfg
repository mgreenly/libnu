# Basic indentation settings (match clang-format IndentWidth: 2)
indent_columns                  = 2
indent_with_tabs                = 0
input_tab_size                  = 2
output_tab_size                 = 2
indent_continue                 = 2        # Use 2-space continuation indent
indent_continue_class_head      = 0        # Special continuation for class header
align_on_tabstop                = false    # Don't align on tabstops

newlines                        = lf
code_width                      = 120
ls_func_split_full              = true     # Allow splitting function definitions if too long
ls_code_width                   = false    # Don't force split at code width

nl_func_def_start               = remove   # Keep opening paren on same line for short functions
nl_func_def_paren               = remove   # Don't force newline after opening paren
nl_func_def_start_single        = remove   # Don't force newline for single param
nl_func_def_start_multi_line    = true     # Force newline for multiline
nl_func_def_args                = ignore   # Let line length determine parameter breaking
nl_func_def_args_multi_line     = true     # Force newlines if multi-line
nl_func_def_end                 = remove   # Keep closing paren on same line if fits
indent_func_def_param           = true     # Use standard indent for wrapped params
indent_func_def_force_col1      = true     # Force function def continuation to column 1
indent_paren_close              = 0        # Don't indent closing paren
align_func_params               = false    # Don't align function parameters to opening paren
align_keep_extra_space          = false    # Don't keep extra spaces when aligning
sp_func_def_paren               = add      # Add space between function name and opening paren
indent_paren_nl                 = false    # Don't indent parentheses on new lines
indent_paren_after_func_def     = false    # Don't indent paren after func def
indent_first_bool_expr          = false    # Don't indent first expression
use_indent_func_call_param      = true     # Use special func call indenting
indent_func_call_param          = true     # Align function call parameters
nl_fdef_brace                   = remove   # Keep ") {" on same line

nl_func_decl_start              = remove   # Don't add extra newlines at start
nl_func_decl_args               = remove   # Keep args on same line
nl_func_decl_end                = remove   # Don't add extra newlines at end
sp_func_proto_paren             = remove   # No space between function name and paren in prototypes

nl_after_func_proto_group       = 2        # Blank lines after function prototype groups

nl_func_call_paren              = ignore   # Let line length determine call formatting

nl_func_type_name               = force    # Force newline between return type and function name
nl_func_type_name_class         = force    # Same for class methods

nl_fdef_brace                   = force    # Force { on new line
sp_paren_brace                  = remove   # No space between ) and { (since on different lines)
nl_fcall_brace                  = remove   # Function call braces on same line
sp_fparen_brace                 = add      # Add space between ) and { in function definitions

sp_before_ptr_star              = ignore   # Don't change space before *
sp_after_ptr_star               = ignore   # Don't change space after *
sp_before_ptr_star_func         = ignore   # Don't change space before * in function params
sp_after_ptr_star_func          = ignore   # Don't change space after * in functions
sp_between_ptr_star             = remove   # No space between ** in pointer-to-pointer
sp_after_ptr_star_trailing      = ignore   # Don't change space after trailing pointer star

align_var_def_star_style        = 0        # Star is part of type (char* foo)
align_typedef_star_style        = 0        # Star is part of type in typedefs
align_func_proto_star_style     = 0        # Star is part of type in prototypes

sp_after_cast                   = ignore   # Don't change space after cast

sp_before_sparen                = add      # Space before control statement parens: if (
sp_after_sparen                 = remove   # No space after control statement parens
sp_sparen_brace                 = add      # Space between ) and { in control statements

sp_inside_paren                 = ignore   # Don't change space inside parentheses
sp_inside_fparen                = ignore   # Don't change space inside function parentheses
sp_paren_paren                  = remove   # No space between nested parentheses

sp_before_comma                 = remove   # No space before comma
sp_after_comma                  = add      # Space after comma

sp_before_semi                  = remove   # No space before semicolon
sp_before_semi_for_empty        = remove   # No space before semicolon in empty for

align_assign_span               = 3        # Align assignments within 3 lines
align_assign_thresh             = 12       # Allow up to 12 spaces for alignment

align_var_def_span              = 0        # Don't align variable definitions
align_var_def_thresh            = 0

nl_if_brace                     = remove   # if (...) {
nl_else_brace                   = remove   # } else {
nl_elseif_brace                 = remove   # } else if (...) {
nl_while_brace                  = remove   # while (...) {
nl_for_brace                    = remove   # for (...) {
nl_do_brace                     = remove   # do {
nl_switch_brace                 = remove   # switch (...) {
nl_brace_while                  = remove   # } while
nl_brace_else                   = remove   # } else

indent_switch_case              = 2        # Indent case labels (older uncrustify option name)
indent_case_brace               = 2        # Indent case statement braces

nl_max                          = 2        # Allow max 2 consecutive empty lines
eat_blanks_after_open_brace     = true     # Remove blank lines after {
eat_blanks_before_close_brace   = true     # Remove blank lines before }

nl_end_of_file                  = add      # Ensure newline at end of file
nl_end_of_file_min              = 1        # Exactly 1 newline at end

cmt_reflow_mode                 = 1        # Reflow comments to fit line width

mod_full_brace_do               = ignore   # Don't add braces to do statements
mod_full_brace_for              = ignore   # Don't add braces to for statements
mod_full_brace_function         = ignore   # Don't modify function braces
mod_full_brace_if               = ignore   # Don't add braces to if statements
mod_full_brace_while            = ignore   # Don't add braces to while statements

pp_indent                       = remove   # Don't indent preprocessor directives
pp_define_at_level              = false    # Don't indent #define to brace level
